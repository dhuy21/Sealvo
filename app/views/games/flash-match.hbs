<div class="game-container">
    <div class="game-header">
        <h1>{{gameTitle}}</h1>
        <p class="game-description">{{gameDescription}}</p>
    </div>
    
    {{#if errorMessage}}
    <div class="error-box">
        <i class="fas fa-exclamation-triangle"></i>
        <p>{{errorMessage}}</p>
        <a href="/monVocabs/add" class="btn add-words-btn">Ajouter des mots</a>
    </div>
    {{else}}
    
    <div class="game-stats">
        <div class="stat-box">
            <span class="stat-label">Votre meilleur score</span>
            <span class="stat-value">{{#if highScore}}{{highScore.score}}{{else}}0{{/if}}</span>
        </div>
        <div class="stat-box">
            <span class="stat-label">Mots disponibles</span>
            <span class="stat-value">{{wordCount}}</span>
        </div>
    </div>
    
    <div class="game-area">
        <div id="game-screen" class="game-screen">
            <div class="pre-game-screen active">
                <h2>Règles du jeu</h2>
                <ul class="rules-list">
                    <li>Associez chaque mot avec sa définition</li>
                    <li>Moins vous faites de tentatives, plus votre score sera élevé</li>
                    <li>Le temps est également pris en compte dans le calcul du score</li>
                    <li>Trouvez toutes les paires pour terminer le jeu</li>
                </ul>
                <div class="difficulty-selector">
                    <h3>Choisissez la difficulté</h3>
                    <div class="difficulty-options">
                        <button class="difficulty-btn active" data-difficulty="easy" data-pairs="4">
                            <i class="fas fa-star"></i>
                            <span>Facile</span>
                            <small>4 paires</small>
                        </button>
                        <button class="difficulty-btn" data-difficulty="medium" data-pairs="6">
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <span>Moyen</span>
                            <small>6 paires</small>
                        </button>
                        <button class="difficulty-btn" data-difficulty="hard" data-pairs="8">
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <span>Difficile</span>
                            <small>8 paires</small>
                        </button>
                    </div>
                </div>
                <button id="start-game" class="start-btn">Commencer à jouer</button>
            </div>
            
            <div class="active-game-screen">
                <div class="game-info">
                    <div class="moves-display">
                        <span class="moves-label">Coups</span>
                        <span id="moves-count" class="moves-value">0</span>
                    </div>
                    <div class="timer-display">
                        <span class="timer-label">Temps</span>
                        <span id="timer" class="timer-value">00:00</span>
                    </div>
                    <div class="pairs-display">
                        <span class="pairs-label">Paires</span>
                        <span id="pairs-count" class="pairs-value">0/8</span>
                    </div>
                </div>
                
                <div id="game-board" class="game-board">
                    <!-- Les cartes seront générées dynamiquement ici -->
                </div>
            </div>
            
            <div class="post-game-screen">
                <h2>Partie terminée !</h2>
                <div class="final-score-container">
                    <span class="final-score-label">Score final</span>
                    <span id="final-score" class="final-score">0</span>
                </div>
                
                <div class="game-summary">
                    <div class="summary-item">
                        <span class="summary-label">Temps</span>
                        <span id="final-time" class="summary-value">00:00</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Coups</span>
                        <span id="final-moves" class="summary-value">0</span>
                    </div>
                </div>
                
                <div id="high-score-message" class="high-score-message"></div>
                
                <div class="action-buttons">
                    <button id="play-again" class="play-again-btn">Rejouer</button>
                    <a href="/games" class="back-btn">Retour aux jeux</a>
                </div>
            </div>
        </div>
        
        {{#if leaderboard.length}}
        <div class="leaderboard">
            <h3>Classement</h3>
            <div class="leaderboard-list">
                {{#each leaderboard}}
                <div class="leaderboard-item">
                    <span class="leaderboard-rank">{{@index}}</span>
                    <span class="leaderboard-user">{{this.username}}</span>
                    <span class="leaderboard-score">{{this.score}}</span>
                </div>
                {{/each}}
            </div>
            <a href="/games/leaderboard/flash-match" class="view-all-btn">Voir tout le classement</a>
        </div>
        {{/if}}
    </div>
    {{/if}}
    
    <div class="game-footer">
        <a href="/games" class="btn back-btn">
            <i class="fas fa-arrow-left"></i> Retour aux jeux
        </a>
        <a href="/monVocabs/learn" class="btn learn-btn">
            <i class="fas fa-book"></i> Apprendre
        </a>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Variables du jeu
    let cards = [];
    let selectedCards = [];
    let matchedPairs = 0;
    let totalPairs = 4; // Par défaut: facile
    let moves = 0;
    let score = 0;
    let gameActive = false;
    let timerInterval = null;
    let startTime = null;
    let currentTime = 0;
    let selectedDifficulty = 'easy';
    
    // Éléments DOM
    const difficultyBtns = document.querySelectorAll('.difficulty-btn');
    const startGameBtn = document.getElementById('start-game');
    const gameBoard = document.getElementById('game-board');
    const movesCount = document.getElementById('moves-count');
    const pairsCount = document.getElementById('pairs-count');
    const timerDisplay = document.getElementById('timer');
    const playAgainBtn = document.getElementById('play-again');
    const finalScore = document.getElementById('final-score');
    const finalTime = document.getElementById('final-time');
    const finalMoves = document.getElementById('final-moves');
    const highScoreMessage = document.getElementById('high-score-message');
    
    // Écrans de jeu
    const preGameScreen = document.querySelector('.pre-game-screen');
    const activeGameScreen = document.querySelector('.active-game-screen');
    const postGameScreen = document.querySelector('.post-game-screen');
    
    // Initialisation de la difficulté
    difficultyBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            difficultyBtns.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            selectedDifficulty = this.dataset.difficulty;
            totalPairs = parseInt(this.dataset.pairs);
        });
    });
    
    // Fonction pour démarrer le jeu
    function startGame() {
        // Réinitialiser les variables
        cards = [];
        selectedCards = [];
        matchedPairs = 0;
        moves = 0;
        score = 0;
        gameActive = true;
        
        // Mettre à jour l'affichage
        movesCount.textContent = moves;
        pairsCount.textContent = `0/${totalPairs}`;
        timerDisplay.textContent = '00:00';
        
        // Charger les cartes
        loadCards();
        
        // Démarrer le timer
        startTime = Date.now();
        timerInterval = setInterval(updateTimer, 1000);
        
        // Afficher l'écran de jeu actif
        preGameScreen.classList.remove('active');
        activeGameScreen.classList.add('active');
        postGameScreen.classList.remove('active');
    }
    
    // Fonction pour charger les cartes
    function loadCards() {
        // Simuler une requête à l'API pour obtenir les mots et les définitions
        // Dans une vraie implémentation, vous feriez un appel fetch à votre API
        fetch(`/games/flash-match/cards?difficulty=${selectedDifficulty}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error(data.error);
                return;
            }
            
            createGameBoard(data.cards);
        })
        .catch(error => {
            console.error('Erreur lors du chargement des cartes:', error);
        });
    }
    
    // Fonction pour créer le plateau de jeu
    function createGameBoard(cardData) {
        // Vider le plateau
        gameBoard.innerHTML = '';
        cards = [];
        
        // Mélanger les cartes
        const shuffledCards = shuffleArray([...cardData]);
        
        // Créer les éléments de carte
        shuffledCards.forEach((card, index) => {
            const cardElement = document.createElement('div');
            cardElement.className = 'card';
            cardElement.dataset.index = index;
            
            const cardInner = document.createElement('div');
            cardInner.className = 'card-inner';
            
            const cardFront = document.createElement('div');
            cardFront.className = 'card-front';
            
            const cardBack = document.createElement('div');
            cardBack.className = 'card-back';
            cardBack.textContent = card.content;
            if (card.type === 'meaning') {
                cardBack.classList.add('meaning-card');
            } else {
                cardBack.classList.add('word-card');
            }
            
            cardInner.appendChild(cardFront);
            cardInner.appendChild(cardBack);
            cardElement.appendChild(cardInner);
            
            // Ajouter l'événement de clic
            cardElement.addEventListener('click', () => flipCard(cardElement, card, index));
            
            // Ajouter au plateau
            gameBoard.appendChild(cardElement);
            cards.push({
                element: cardElement,
                data: card,
                flipped: false,
                matched: false
            });
        });
        
        // Appliquer la grille en fonction du nombre de paires
        let gridClass = '';
        if (totalPairs === 4) {
            gridClass = 'grid-4';
        } else if (totalPairs === 6) {
            gridClass = 'grid-6';
        } else {
            gridClass = 'grid-8';
        }
        gameBoard.className = `game-board ${gridClass}`;
    }
    
    // Fonction pour retourner une carte
    function flipCard(cardElement, cardData, index) {
        // Vérifier si le jeu est actif et si la carte n'est pas déjà retournée ou appariée
        if (!gameActive || cards[index].flipped || cards[index].matched) {
            return;
        }
        
        // Vérifier si deux cartes sont déjà retournées
        if (selectedCards.length === 2) {
            return;
        }
        
        // Retourner la carte
        cardElement.classList.add('flipped');
        cards[index].flipped = true;
        
        // Ajouter la carte aux cartes sélectionnées
        selectedCards.push({
            index,
            pairId: cardData.pairId,
            type: cardData.type
        });
        
        // Vérifier si deux cartes sont sélectionnées
        if (selectedCards.length === 2) {
            // Incrémenter le nombre de coups
            moves++;
            movesCount.textContent = moves;
            
            // Vérifier si les cartes forment une paire
            setTimeout(checkMatch, 1000);
        }
    }
    
    // Fonction pour vérifier si les cartes forment une paire
    function checkMatch() {
        const card1 = selectedCards[0];
        const card2 = selectedCards[1];
        
        if (card1.pairId === card2.pairId && card1.type !== card2.type) {
            // Les cartes forment une paire
            cards[card1.index].matched = true;
            cards[card2.index].matched = true;
            
            // Marquer les cartes comme appariées
            cards[card1.index].element.classList.add('matched');
            cards[card2.index].element.classList.add('matched');
            
            matchedPairs++;
            pairsCount.textContent = `${matchedPairs}/${totalPairs}`;
            
            // Vérifier si toutes les paires ont été trouvées
            if (matchedPairs === totalPairs) {
                endGame();
            }
        } else {
            // Les cartes ne forment pas une paire
            cards[card1.index].flipped = false;
            cards[card2.index].flipped = false;
            
            // Retourner les cartes
            cards[card1.index].element.classList.remove('flipped');
            cards[card2.index].element.classList.remove('flipped');
        }
        
        // Réinitialiser les cartes sélectionnées
        selectedCards = [];
    }
    
    // Fonction pour mettre à jour le timer
    function updateTimer() {
        const elapsed = Math.floor((Date.now() - startTime) / 1000);
        currentTime = elapsed;
        
        const minutes = Math.floor(elapsed / 60);
        const seconds = elapsed % 60;
        
        timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    // Fonction pour terminer le jeu
    function endGame() {
        gameActive = false;
        clearInterval(timerInterval);
        
        // Calculer le score
        // Formule: (totalPairs * 100) * (totalPairs / moves) * (totalPairs * 10 / elapsedTime)
        // Cette formule récompense: plus de paires, moins de coups, moins de temps
        const timeBonus = Math.max(1, totalPairs * 10 / currentTime);
        const movesBonus = Math.max(0.1, totalPairs / moves);
        score = Math.floor((totalPairs * 100) * movesBonus * timeBonus);
        
        // Mettre à jour l'écran de fin de jeu
        finalScore.textContent = score;
        
        const minutes = Math.floor(currentTime / 60);
        const seconds = currentTime % 60;
        finalTime.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        finalMoves.textContent = moves;
        
        // Vérifier si c'est un nouveau record
        const currentHighScore = {{#if highScore}}{{highScore.score}}{{else}}0{{/if}};
        if (score > currentHighScore) {
            highScoreMessage.textContent = 'Nouveau record personnel !';
            highScoreMessage.classList.add('new-record');
            
            // Enregistrer le score
            saveScore(score);
        }
        
        // Afficher l'écran de fin de jeu
        setTimeout(() => {
            activeGameScreen.classList.remove('active');
            postGameScreen.classList.add('active');
        }, 1000);
    }
    
    // Fonction pour enregistrer le score
    function saveScore(score) {
        // Simuler l'enregistrement du score
        // Dans une vraie implémentation, vous feriez un appel fetch à votre API
        fetch('/games/score', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                game_type: 'flash_match',
                score: score,
                details: {
                    difficulty: selectedDifficulty,
                    pairs: totalPairs,
                    moves: moves,
                    time: currentTime
                }
            })
        })
        .then(response => response.json())
        .then(data => {
            console.log('Score enregistré avec succès:', data);
        })
        .catch(error => {
            console.error('Erreur lors de l\'enregistrement du score:', error);
        });
    }
    
    // Fonction pour mélanger un tableau
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }
    
    // Événements
    startGameBtn.addEventListener('click', startGame);
    playAgainBtn.addEventListener('click', startGame);
});
</script>

<style>
.game-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 2rem;
}

.game-header {
    text-align: center;
    margin-bottom: 2rem;
}

.game-header h1 {
    color: #333;
    margin-bottom: 0.5rem;
}

.game-description {
    color: #666;
    font-size: 1.1rem;
}

.error-box {
    background-color: #fff5f5;
    border-left: 4px solid #e53e3e;
    padding: 1.5rem;
    border-radius: 8px;
    margin-bottom: 2rem;
    text-align: center;
}

.error-box i {
    font-size: 2rem;
    color: #e53e3e;
    margin-bottom: 1rem;
}

.add-words-btn {
    margin-top: 1rem;
    background-color: #3b82f6;
    color: #fff;
    padding: 0.6rem 1.2rem;
    border-radius: 5px;
    text-decoration: none;
    font-weight: 500;
    display: inline-block;
}

.game-stats {
    display: flex;
    justify-content: space-around;
    margin-bottom: 2rem;
}

.stat-box {
    text-align: center;
    background-color: #f3f4f6;
    padding: 1rem;
    border-radius: 8px;
    width: 45%;
}

.stat-label {
    display: block;
    color: #4b5563;
    font-size: 0.9rem;
    margin-bottom: 0.3rem;
}

.stat-value {
    display: block;
    font-size: 1.8rem;
    font-weight: bold;
    color: #3b82f6;
}

.game-area {
    display: flex;
    gap: 2rem;
    margin-bottom: 2rem;
}

.game-screen {
    flex: 1;
    background-color: #fff;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    min-height: 400px;
    position: relative;
}

.pre-game-screen,
.active-game-screen,
.post-game-screen {
    display: none;
}

.pre-game-screen.active,
.active-game-screen.active,
.post-game-screen.active {
    display: block;
}

.rules-list {
    margin: 1.5rem 0;
    padding-left: 1.5rem;
}

.rules-list li {
    margin-bottom: 0.5rem;
    color: #4b5563;
}

.difficulty-selector {
    margin: 2rem 0;
    text-align: center;
}

.difficulty-selector h3 {
    margin-bottom: 1rem;
    color: #4b5563;
}

.difficulty-options {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
}

.difficulty-btn {
    flex: 1;
    background-color: #f3f4f6;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    cursor: pointer;
    transition: all 0.3s;
}

.difficulty-btn.active {
    background-color: #dbeafe;
    border-color: #3b82f6;
}

.difficulty-btn i {
    color: #fbbf24;
    margin-bottom: 0.5rem;
}

.difficulty-btn span {
    font-weight: 500;
    margin-bottom: 0.3rem;
}

.difficulty-btn small {
    color: #6b7280;
    font-size: 0.8rem;
}

.start-btn {
    display: block;
    width: 100%;
    background: linear-gradient(135deg, #6a11cb, #2575fc);
    color: #fff;
    padding: 1rem;
    border: none;
    border-radius: 50px;
    font-size: 1.1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s;
}

.start-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(106, 17, 203, 0.4);
}

.game-info {
    display: flex;
    justify-content: space-between;
    margin-bottom: 2rem;
}

.moves-display,
.timer-display,
.pairs-display {
    background-color: #f3f4f6;
    padding: 0.8rem 1rem;
    border-radius: 50px;
    text-align: center;
}

.moves-label,
.timer-label,
.pairs-label {
    display: block;
    font-size: 0.8rem;
    color: #4b5563;
}

.moves-value,
.timer-value,
.pairs-value {
    font-size: 1.2rem;
    font-weight: bold;
    color: #3b82f6;
}

.game-board {
    display: grid;
    gap: 1rem;
    margin: 0 auto;
}

.game-board.grid-4 {
    grid-template-columns: repeat(4, 1fr);
}

.game-board.grid-6 {
    grid-template-columns: repeat(4, 1fr);
}

.game-board.grid-8 {
    grid-template-columns: repeat(4, 1fr);
}

.card {
    height: 120px;
    perspective: 1000px;
    cursor: pointer;
}

.card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    transition: transform 0.6s;
    transform-style: preserve-3d;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.card.flipped .card-inner {
    transform: rotateY(180deg);
}

.card-front,
.card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    text-align: center;
}

.card-front {
    background: linear-gradient(135deg, #6a11cb, #2575fc);
}

.card-back {
    background-color: #fff;
    transform: rotateY(180deg);
}

.card-back.word-card {
    font-weight: bold;
    color: #2563eb;
    font-size: 1.2rem;
}

.card-back.meaning-card {
    color: #4b5563;
    font-size: 0.9rem;
}

.card.matched .card-inner {
    box-shadow: 0 0 15px rgba(16, 185, 129, 0.7);
    animation: match 0.5s ease-in-out;
}

@keyframes match {
    0%, 100% {
        transform: rotateY(180deg) scale(1);
    }
    50% {
        transform: rotateY(180deg) scale(1.05);
    }
}

.final-score-container {
    text-align: center;
    margin: 2rem 0;
}

.final-score-label {
    display: block;
    color: #4b5563;
    font-size: 1.1rem;
    margin-bottom: 0.5rem;
}

.final-score {
    font-size: 3.5rem;
    font-weight: bold;
    color: #3b82f6;
}

.game-summary {
    display: flex;
    justify-content: space-around;
    margin-bottom: 2rem;
}

.summary-item {
    text-align: center;
}

.summary-label {
    display: block;
    color: #4b5563;
    font-size: 0.9rem;
    margin-bottom: 0.3rem;
}

.summary-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: #333;
}

.high-score-message {
    text-align: center;
    margin: 1.5rem 0;
    padding: 1rem;
    color: #333;
    font-size: 1.1rem;
}

.high-score-message.new-record {
    background-color: #fef3c7;
    border-radius: 8px;
    color: #d97706;
    font-weight: 500;
}

.action-buttons {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
}

.play-again-btn,
.back-btn {
    flex: 1;
    padding: 1rem;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
}

.play-again-btn {
    background: linear-gradient(135deg, #6a11cb, #2575fc);
    color: #fff;
}

.back-btn {
    background-color: #e5e7eb;
    color: #4b5563;
}

.leaderboard {
    flex: 0 0 300px;
    background-color: #fff;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
}

.leaderboard h3 {
    text-align: center;
    margin-bottom: 1rem;
    color: #333;
}

.leaderboard-item {
    display: flex;
    align-items: center;
    padding: 0.8rem;
    border-bottom: 1px solid #e5e7eb;
}

.leaderboard-rank {
    width: 30px;
    height: 30px;
    background-color: #f3f4f6;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    color: #4b5563;
    margin-right: 0.8rem;
}

.leaderboard-item:nth-child(1) .leaderboard-rank {
    background-color: #fef3c7;
    color: #d97706;
}

.leaderboard-item:nth-child(2) .leaderboard-rank {
    background-color: #f1f5f9;
    color: #64748b;
}

.leaderboard-item:nth-child(3) .leaderboard-rank {
    background-color: #fff7ed;
    color: #c2410c;
}

.leaderboard-user {
    flex: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: #333;
    font-weight: 500;
}

.leaderboard-score {
    font-weight: bold;
    color: #3b82f6;
}

.view-all-btn {
    display: block;
    text-align: center;
    margin-top: 1rem;
    color: #3b82f6;
    text-decoration: none;
    font-size: 0.9rem;
}

.game-footer {
    display: flex;
    justify-content: space-between;
    margin-top: 2rem;
}

.game-footer .btn {
    padding: 0.8rem 1.5rem;
    border-radius: 5px;
    text-decoration: none;
    font-weight: 500;
    display: flex;
    align-items: center;
}

.game-footer .btn i {
    margin-right: 0.5rem;
}

.game-footer .back-btn {
    background-color: #f3f4f6;
    color: #4b5563;
}

.game-footer .learn-btn {
    background-color: #3b82f6;
    color: #fff;
}

@media (max-width: 768px) {
    .game-area {
        flex-direction: column;
    }
    
    .leaderboard {
        flex: auto;
    }
    
    .difficulty-options {
        flex-direction: column;
    }
    
    .game-board.grid-4,
    .game-board.grid-6,
    .game-board.grid-8 {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .game-info {
        flex-direction: column;
        gap: 1rem;
        align-items: center;
    }
    
    .game-footer {
        flex-direction: column;
        gap: 1rem;
    }
    
    .game-footer .btn {
        text-align: center;
        justify-content: center;
    }
}
</style> 